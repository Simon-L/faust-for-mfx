name: libfaust

env:
  FAUST_VERSION: 2.74.3
  FAUSTGEN_VERSION: "1.71"   
  LLVM_PACKAGE_VERSION: "15.0.7"
  CMAKE_OSX_DEPLOYMENT_TARGET: "10.15"
  LLVM_COMMIT: 8dfdcc7b7bf66834a761bd8de445840ef68e4d1a

# Controls when the action will run.
on:
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_call:

  workflow_dispatch:
    inputs:
      do-build-windows:
        type: boolean
        default: true
        description: 'do-build-windows'
      do-build-macos:
        type: boolean
        default: true
        description: 'do-build-macos'
      do-build-ubuntu:
        type: boolean
        default: true
        description: 'do-build-ubuntu'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-ubuntu:
    # if: ${{ inputs.do-build-ubuntu || false }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-x86_64
            os: ubuntu-22.04
            cmake-options: >-
              -DCMAKE_BUILD_TYPE=Release
              -DCMAKE_VERBOSE_MAKEFILE=ON

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        repository: grame-cncm/faust
        ref: master-dev
        
    - shell: bash
      run: |
        cat <<EOF > build/backends/mfx.cmake
        set ( C_BACKEND      COMPILER STATIC DYNAMIC      CACHE STRING  "Include C backend" FORCE )
        set ( CODEBOX_BACKEND      COMPILER STATIC DYNAMIC      CACHE STRING  "Include Codebox backend" FORCE )
        set ( CPP_BACKEND    COMPILER STATIC DYNAMIC      CACHE STRING  "Include CPP backend" FORCE )
        set ( CMAJOR_BACKEND                     OFF  CACHE STRING  "Include Cmajor backend" FORCE )
        #set ( CMAJOR_BACKEND                     OFF       CACHE STRING  "Include Cmajor backend" FORCE )
        set ( CSHARP_BACKEND                     OFF       CACHE STRING  "Include CSharp backend" FORCE )
        set ( DLANG_BACKEND                      OFF       CACHE STRING  "Include Dlang backend" FORCE )
        set ( FIR_BACKEND                        OFF      CACHE STRING  "Include FIR backend" FORCE )
        set ( INTERP_BACKEND                     OFF      CACHE STRING  "Include Interpreter backend" FORCE )
        set ( JAVA_BACKEND                       OFF       CACHE STRING  "Include JAVA backend" FORCE )
        set ( JAX_BACKEND                        OFF       CACHE STRING  "Include JAX backend"  FORCE )
        set ( JULIA_BACKEND                      OFF       CACHE STRING  "Include Julia backend" FORCE )
        set ( JSFX_BACKEND                      OFF       CACHE STRING  "Include JSFX backend" FORCE )
        set ( LLVM_BACKEND   COMPILER STATIC DYNAMIC      CACHE STRING  "Include LLVM backend" FORCE )
        set ( OLDCPP_BACKEND COMPILER STATIC DYNAMIC      CACHE STRING  "Include old CPP backend" FORCE )
        set ( RUST_BACKEND                       OFF      CACHE STRING  "Include Rust backend" FORCE )
        set ( TEMPLATE_BACKEND                   OFF      CACHE STRING  "Include Template backend" FORCE )
        set ( VHDL_BACKEND                       OFF      CACHE STRING  "Include VHLD backend" FORCE )
        set ( WASM_BACKEND                       OFF      CACHE STRING  "Include WASM backend" FORCE )
        EOF
        
    - name: Install dependencies
      run: |
        sudo apt-get install -y zstd libncurses-dev libxml2-dev

    - name: Install dependencies
      run: |
        sudo apt-get install -y libllvm15 llvm-15 llvm-15-dev libsndfile1-dev

    - name: Build libfaust
      run: |
        find /usr -name llvm-config
        export PATH="/usr/lib/llvm-15/bin:$PATH"
        export LLVM_ROOT=$(llvm-config --prefix | tr '\n' ' ')
        echo "LLVM_ROOT: " $LLVM_ROOT
        cd build
        cmake -C ./backends/mfx.cmake -C ./targets/all.cmake . -Bbuild ${{matrix.cmake-options}} -DCMAKE_INSTALL_PREFIX=faust -DINCLUDE_DYNAMIC=ON -DINCLUDE_STATIC=ON -DINCLUDE_LLVM=ON -DUSE_LLVM_CONFIG=ON
        cmake --build build --config Release --parallel 4 --verbose
        cmake --build build --config Release --target install --verbose
    
    - name: Set sha variable
      id: sha
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Upload Faust artifact
      uses: actions/upload-artifact@v4
      with:
        name: faust-ubuntu-${{ steps.sha.outputs.sha_short }}
        path: build/faust/
        
  build-windows:
    # if: ${{ inputs.do-build-windows || false }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: win64
            os: windows-2022
            llvm-url: https://github.com/grame-cncm/faust/releases/download/2.59.5-llvm/llvm-17.0.6-win11-x86_64.zip
            libsndfile-url: https://github.com/libsndfile/libsndfile/releases/download/1.2.0/libsndfile-1.2.0-win64.zip

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        repository: grame-cncm/faust
        ref: master-dev

    - shell: bash
      run: |
        cat <<EOF > build/backends/mfx.cmake
        set ( C_BACKEND      COMPILER STATIC DYNAMIC      CACHE STRING  "Include C backend" FORCE )
        set ( CODEBOX_BACKEND      COMPILER STATIC DYNAMIC      CACHE STRING  "Include Codebox backend" FORCE )
        set ( CPP_BACKEND    COMPILER STATIC DYNAMIC      CACHE STRING  "Include CPP backend" FORCE )
        set ( CMAJOR_BACKEND                     OFF  CACHE STRING  "Include Cmajor backend" FORCE )
        #set ( CMAJOR_BACKEND                     OFF       CACHE STRING  "Include Cmajor backend" FORCE )
        set ( CSHARP_BACKEND                     OFF       CACHE STRING  "Include CSharp backend" FORCE )
        set ( DLANG_BACKEND                      OFF       CACHE STRING  "Include Dlang backend" FORCE )
        set ( FIR_BACKEND                        OFF      CACHE STRING  "Include FIR backend" FORCE )
        set ( INTERP_BACKEND COMPILER STATIC DYNAMIC      CACHE STRING  "Include Interpreter backend" FORCE )
        set ( JAVA_BACKEND                       OFF       CACHE STRING  "Include JAVA backend" FORCE )
        set ( JAX_BACKEND                        OFF       CACHE STRING  "Include JAX backend"  FORCE )
        set ( JULIA_BACKEND                      OFF       CACHE STRING  "Include Julia backend" FORCE )
        set ( JSFX_BACKEND                      OFF       CACHE STRING  "Include JSFX backend" FORCE )
        set ( LLVM_BACKEND   COMPILER STATIC DYNAMIC      CACHE STRING  "Include LLVM backend" FORCE )
        set ( OLDCPP_BACKEND COMPILER STATIC DYNAMIC      CACHE STRING  "Include old CPP backend" FORCE )
        set ( RUST_BACKEND                       OFF      CACHE STRING  "Include Rust backend" FORCE )
        set ( TEMPLATE_BACKEND                   OFF      CACHE STRING  "Include Template backend" FORCE )
        set ( VHDL_BACKEND                       OFF      CACHE STRING  "Include VHLD backend" FORCE )
        set ( WASM_BACKEND                       OFF      CACHE STRING  "Include WASM backend" FORCE )
        EOF
    
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Download LLVM
      run: |
        # Libfaust will need to link against LLVM.
        # We download a Windows x86_64 LLVM build that we've built in advance.
        curl -L ${{ matrix.llvm-url }} -o llvm.zip
        7z x llvm.zip -y

    - name: Download Libsndfile
      run: |
        curl -L ${{ matrix.libsndfile-url }} -o libsndfile.zip
        7z x libsndfile.zip -y
        mv libsndfile-1.2.0-win64 libsndfile

    # todo: remove windows/libmicrohttpd from repo and use dynamically downloaded version
    # - name: Download libmicrohttpd
    #   run: |
    #     curl -L https://ftpmirror.gnu.org/libmicrohttpd/libmicrohttpd-latest-w32-bin.zip -o libmicrohttpd.zip
    #     7z x libmicrohttpd.zip -y    
      
    - name: Build libfaust
      shell: cmd
      run: |
        cd build
        SET VERSION=2.74.2
        SET MYPATH=%cd%
        SET "MYPATH=%MYPATH:\=/%"
        SET BUILD=%MYPATH%/build
        SET LLVM_CONFIG_A="%MYPATH%/../llvm/bin/llvm-config.exe"
        SET LLVM_CONFIG_B="%MYPATH%/../../llvm/bin/llvm-config.exe"
        SET LIBSNDFILE_A="%MYPATH%/../libsndfile"
        SET LIBSNDFILE_B="%MYPATH%/../../libsndfile"
        SET VS_REDIST=%VCToolsRedistDir%vc_redist.x64.exe
        SET "VS_REDIST=%VS_REDIST:\=/%"
        IF EXIST %LLVM_CONFIG_A% (
            SET LLVM_CONFIG=%LLVM_CONFIG_A%
            echo llvm-config.exe found at %LLVM_CONFIG%
        ) ELSE (
            IF EXIST %LLVM_CONFIG_B% (
                SET LLVM_CONFIG=%LLVM_CONFIG_B%
                echo llvm-config.exe found at %LLVM_CONFIG%
            ) ELSE (
                echo llvm-config.exe not found at %LLVM_CONFIG_A% or %LLVM_CONFIG_B%
                EXIT /B
            )
        )
        IF EXIST %LIBSNDFILE_A% (
            SET LIBSNDFILE=%LIBSNDFILE_A%
            echo libsndfile install found at %LIBSNDFILE%
        ) ELSE (
            IF EXIST %LIBSNDFILE_B% (
                SET LIBSNDFILE=%LIBSNDFILE_B%
                echo libsndfile install found at %LIBSNDFILE%
            ) ELSE (
                echo libsndfile install not found at %LIBSNDFILE_A% or %LIBSNDFILE_B%
                EXIT /B
            )
        )
        if not exist "%VS_REDIST%" (
            echo "Windows Redistributables were not found at location: %VS_REDIST%"
            EXIT /B 1
        )
        echo "Building Faust version: %VERSION%"
        echo "VS_REDIST is %VS_REDIST%"
        echo "Using build folder %BUILD%"
        echo "Make sure that faust submodules are up-to-date"
        echo "###################### Building Faust package ######################"
        mkdir build
        cd build
        cmake -C ..\backends\mfx.cmake -C ../targets/all-win64.cmake -DUSE_LLVM_CONFIG=ON -DLLVM_CONFIG="%LLVM_CONFIG%" -DCMAKE_INSTALL_PREFIX=faust -Ax64 ..
        cmake --build . --config Release --verbose --  /maxcpucount:4
        cmake --build . --config Release --target install --verbose
        echo DONE VERSION %VERSION%
      env:
        LLVM_PACKAGE_VERSION: 17.0.6
        
    #- name: Setup tmate session
   #   uses: mxschmitt/action-tmate@v3
    #  env:
     #   LLVM_PACKAGE_VERSION: 17.0.6
    - name: Set sha variable
      shell: bash
      id: sha
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Upload Faust artifact
      uses: actions/upload-artifact@v4
      with:
        name: faust-windows-${{ steps.sha.outputs.sha_short }}
        path: build/build/faust/

  build-macos:
    #if: ${{ inputs.do-build-macos || true }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: arm64
            os: macos-15
            ARCHS: "-arch arm64"
            CMAKE_OSX_ARCHITECTURES: arm64
            HOST: aarch64-apple-darwin
            ENABLE_MPEG: OFF
          - name: x64
            os: macos-13
            ARCHS: "-arch x86_64"
            CMAKE_OSX_ARCHITECTURES: x86_64
            HOST: x86_64-apple-darwin
            ENABLE_MPEG: ON

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        repository: grame-cncm/faust
        ref: master-dev

    - shell: bash
      run: |
        cat <<EOF > build/backends/mfx.cmake
        set ( C_BACKEND      COMPILER STATIC DYNAMIC      CACHE STRING  "Include C backend" FORCE )
        set ( CODEBOX_BACKEND      COMPILER STATIC DYNAMIC      CACHE STRING  "Include Codebox backend" FORCE )
        set ( CPP_BACKEND    COMPILER STATIC DYNAMIC      CACHE STRING  "Include CPP backend" FORCE )
        set ( CMAJOR_BACKEND                     OFF  CACHE STRING  "Include Cmajor backend" FORCE )
        #set ( CMAJOR_BACKEND                     OFF       CACHE STRING  "Include Cmajor backend" FORCE )
        set ( CSHARP_BACKEND                     OFF       CACHE STRING  "Include CSharp backend" FORCE )
        set ( DLANG_BACKEND                      OFF       CACHE STRING  "Include Dlang backend" FORCE )
        set ( FIR_BACKEND                        OFF      CACHE STRING  "Include FIR backend" FORCE )
        set ( INTERP_BACKEND                     OFF      CACHE STRING  "Include Interpreter backend" FORCE )
        set ( JAVA_BACKEND                       OFF       CACHE STRING  "Include JAVA backend" FORCE )
        set ( JAX_BACKEND                        OFF       CACHE STRING  "Include JAX backend"  FORCE )
        set ( JULIA_BACKEND                      OFF       CACHE STRING  "Include Julia backend" FORCE )
        set ( JSFX_BACKEND                      OFF       CACHE STRING  "Include JSFX backend" FORCE )
        set ( LLVM_BACKEND   COMPILER STATIC DYNAMIC      CACHE STRING  "Include LLVM backend" FORCE )
        set ( OLDCPP_BACKEND COMPILER STATIC DYNAMIC      CACHE STRING  "Include old CPP backend" FORCE )
        set ( RUST_BACKEND                       OFF      CACHE STRING  "Include Rust backend" FORCE )
        set ( TEMPLATE_BACKEND                   OFF      CACHE STRING  "Include Template backend" FORCE )
        set ( VHDL_BACKEND                       OFF      CACHE STRING  "Include VHLD backend" FORCE )
        set ( WASM_BACKEND                       OFF      CACHE STRING  "Include WASM backend" FORCE )
        EOF

    - name: Checkout LLVM universal binaries (shallow)
      run: |
        git clone --depth 1 --filter=blob:none --sparse https://github.com/cmajor-lang/llvm.git llvm-universal
        cd llvm-universal
        git sparse-checkout set release/osx/universal

    # - name: Build libmicrohttpd
    #   run: |
    #     curl -L https://mirror.cyberbits.eu/gnu/libmicrohttpd/libmicrohttpd-0.9.76.tar.gz -o libmicrohttpd-0.9.76.tar.gz
    #     tar -xvf libmicrohttpd-0.9.76.tar.gz
    #     mv libmicrohttpd-0.9.76 libmicrohttpd
    #     cd libmicrohttpd
    #     export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
    #     export TARGET=${{matrix.HOST}}
    #     export CC=$(xcrun -find -sdk macosx gcc)
    #     export CFLAGS="${{matrix.ARCHS}} -target $TARGET -isysroot $SDKROOT -mmacosx-version-min=10.15"
    #     export LDFLAGS="${{matrix.ARCHS}} -target $TARGET -isysroot $SDKROOT"
    #     ./configure --enable-https=no --host=$TARGET --prefix=$PWD/libmicrohttpd
    #     make && make install

    - name: Brew install requirements (arm64)
      if: ${{ endsWith( matrix.name, 'arm64') }}
      # todo: should we bother with brew update?
      run: |
        brew update
        PACKAGES=(ncurses gtk+ liblo lame flac libogg libtool libvorbis opus mpg123)
        DEPS=($(brew deps --union --topological $(echo $PACKAGES) | tr '\n' ' '))
        PACKAGES=("${DEPS[@]}" "${PACKAGES[@]}")
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        export HOMEBREW_NO_INSTALL_UPGRADE=1
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        for PACKAGE in "${PACKAGES[@]}"
        do
          echo "Fetching bottle: $PACKAGE"
          response=$(brew fetch --bottle-tag=arm64_ventura $PACKAGE 2>&1)
          package_path=$(echo $response | sed -n 's/.*\:\ \(.*\.tar\.gz\).*/\1/p')
          package_path=$(echo "$package_path" | xargs)
          echo "Package Path: $package_path"
          brew reinstall --verbose --force-bottle "$package_path" || true
        done

        brew uninstall --ignore-dependencies curl git || true

    - name: Brew install requirements (x64)
      if: ${{ endsWith( matrix.name, 'x64') }}
      run: brew install pkg-config ncurses gtk+ liblo lame flac libogg libtool libvorbis opus mpg123

    # - name: Install Qt
    #   uses: jurplel/install-qt-action@v4
    #   with:
    #     version: '5.15.2'
    #     host: 'mac'
    #     target: 'desktop'
    #     dir: '${{ github.workspace }}/qt_install'
    #     # tools: 'tools_ifw tools_qtcreator,qt.tools.qtcreator'

    - name: Clone Libsndfile
      uses: actions/checkout@v4
      with:
        repository: libsndfile/libsndfile
        path: libsndfile
        submodules: true

    - name: Build libsndfile
      # Note that can't use the libsndfile from brew because it lacks libsndfile.a, the static lib.
      run: |
        brew uninstall --ignore-dependencies libsndfile || true
        cd libsndfile
        LIBSNDFILE_INSTALL_PREFIX="$PWD/install"
        mkdir CMakeBuild && cd CMakeBuild
        cmake .. -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$LIBSNDFILE_INSTALL_PREFIX" -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_OSX_ARCHITECTURES=$CMAKE_OSX_ARCHITECTURES -DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_TESTING=OFF -DENABLE_MPEG=${{ matrix.ENABLE_MPEG }}
        make && make install
        otool -L $LIBSNDFILE_INSTALL_PREFIX/lib/libsndfile.a
        echo "Testing pkg-config for sndfile"
        export PKG_CONFIG_PATH="$LIBSNDFILE_INSTALL_PREFIX/lib/pkgconfig"
        pkg-config --cflags sndfile
      env:
        CMAKE_OSX_ARCHITECTURES: ${{matrix.CMAKE_OSX_ARCHITECTURES}}

    # - name: Clone MAX SDK
    #   uses: actions/checkout@v4
    #   with:
    #     repository: Cycling74/max-sdk-base
    #     path: max-sdk-base

    - name: Slim LLVM libraries
      env:
       CMAKE_ARCH: ${{ matrix.CMAKE_OSX_ARCHITECTURES }}
      run: |
        echo "Slimming LLVM universal libs to ${{matrix.CMAKE_OSX_ARCHITECTURES}}"
        mkdir -p slim-llvm-libs
        for lib in llvm-universal/release/osx/universal/lib/lib*.a; do
          base=$(basename "$lib")
          lipo "$lib" -extract $CMAKE_ARCH -output slim-llvm-libs/"$base"
        done

    - name: Build everything
      # todo: do we need to specify the qt@5 path for PKG_CONFIG_PATH?
      run: |
        export PKG_CONFIG_PATH="$QT_ROOT_DIR/lib/pkgconfig:$PWD/libsndfile/install/lib/pkgconfig:$PWD/libmicrohttpd/libmicrohttpd/lib/pkgconfig"
     
        export LLVM_DIR=${{ github.workspace }}/llvm-universal/release/osx/universal
        export LLVM_LIB_DIR=$PWD/slim-llvm-libs
        export LLVM_INCLUDE_DIRS=$LLVM_DIR/include 

        export LLVM_LIBS=$(ls $LLVM_LIB_DIR/lib*.a | sed "s|$LLVM_LIB_DIR/lib\(.*\)\.a|-l\1|g" | tr '\n' ' ')
        export LLVM_LIBS="-lm -lcurses -lxml2 -lz $LLVM_LIBS"
        export LLVM_LIBS="$(echo "$LLVM_LIBS" | sed 's/[[:space:]]*$//')"
        export LLVM_DEFINITIONS="-D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS"
        export LLVM_LD_FLAGS="-L$LLVM_LIB_DIR -Wl,-search_paths_first -Wl,-headerpad_max_install_names"
        export LLVM="$LLVM_LD_FLAGS $LLVM_LIBS"

        export FAUSTLIVE=$PWD/faustlive
        export BUILD_HTTP_STATIC=ON
        export USE_STATIC_SNDFILE=1
        export CMAKEOPT="-DCMAKE_OSX_ARCHITECTURES="$CMAKE_OSX_ARCHITECTURES" -DCMAKE_OSX_DEPLOYMENT_TARGET=$CMAKE_OSX_DEPLOYMENT_TARGET -DCMAKE_BUILD_TYPE=Release"
        export INCLUDE_LLVM=ON
        export USE_LLVM_CONFIG=off
    
        cd build
        make BACKENDS=mfx.cmake TARGETS=all.cmake PREFIX=$PWD/pfx BUILDOPT="--config Release --parallel 4" all
        make BACKENDS=mfx.cmake TARGETS=all.cmake PREFIX=$PWD/pfx BUILDOPT="--config Release --parallel 4" install
      env:
        CMAKE_OSX_ARCHITECTURES: ${{matrix.CMAKE_OSX_ARCHITECTURES}}
        ARCHS: ${{matrix.ARCHS}}

    #- name: Setup tmate session
    #  uses: mxschmitt/action-tmate@v3
    - name: Set sha variable
      id: sha
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
    - name: Upload Faust artifact
      uses: actions/upload-artifact@v4
      with:
        name: faust-macos-${{ matrix.name }}-${{ steps.sha.outputs.sha_short }}
        path: build/pfx/
        # if-no-files-found: error

  publish-nightly:
    name: Publish Nightly
    runs-on: ubuntu-22.04
    needs: [ build-ubuntu, build-windows, build-macos ]
    steps:
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: Nightly # This may also be of the form 'refs/tags/staging'
          assets: '*'
          fail-if-no-assets: false
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - name: Check
        shell: bash
        run: |
          tar -C faust-macos-arm64-* -czf faust-for-mfx-macos-arm64.tar.gz .
          tar -C faust-macos-x64-* -czf faust-for-mfx-macos-x64.tar.gz .
          tar -C faust-ubuntu* -czf faust-for-mfx-ubuntu.tar.gz .
          tar -C faust-windows* -czf faust-for-mfx-windows.tar.gz .
      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.tar.gz'
          tag: Nightly
          overwrite: true
          file_glob: true